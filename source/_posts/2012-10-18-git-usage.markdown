---
layout: post
title: "Git部分命令说明"
date: 2012-10-18 14:33
comments: true
categories: 
    - Program
tags:
    - Git
---

开始研究Git，[《Git权威指南》](http://www.worldhello.net/gotgit/)这本书看了一部分了，觉得讲解的挺详细挺好的。
在这里记录一下部分Git命令，方便查找。

### 参数配置
```
git config --global core.quotepath false        # 解决中文问题
git config --global color.ui true               # Git高亮
git config --global core.editor vim             # 配置默认编辑器
git config --global user.name [name]            # 配置默认用户名
git config --global user.email [email]          # 配置默认邮箱
git config --global core.excludesfile [file]    # 配置个人ignore配置
git config receive.denyNonFastForwards true     # 禁止非快进式推进
git config push.default tracking                # 设置默认只提交当前分支
git config branch.autosetuprebase always        # 执行更新时，使用变基来进行合并操作
```

<!-- more -->

### 基础
```
git add [file]                                  # 将工作区文件添加到暂存区
git add .                                       # 将工作区的修改添加修改到暂存区
git add -u                                      # 将工作区的修改删除添加到暂存区
git add -A                                      # 将工作区的所有改动添加到暂存区
git rm [file]                                   # 删除文件，并将该操作添加到暂存区
git status                                      # 查看当前状态
git commit -m [message]                         # 提交当前修改提交到版本库
git commit --amend -m [message]                 # 重新进行最后一次提交
git log                                         # 查看版本库的提交记录
```

### 比较
```
git diff                                        # 比较工作区和暂存区
git diff HEAD                                   # 比较暂存区和HEAD区
git diff --cached                               # 比较工作区和HEAD区
```

### 重置
```
git reset -- [file]                             # 将版本库中文件替换掉暂存区的文件
git reset --soft  [<commit>]                    # 清空版本库中的修改
git reset --mixed [<commit>]                    # 清空版本库、暂存区中的修改
git reset --hard  [<commit>]                    # 清空版本库、暂存区、工作区的修改
```

### 检出
```
git checkout -- [file]                          # 将暂存区中该文件的覆盖掉工作区
git checkout [branch]                           # 切换HEAD到另一分支
git checkout [new_branch] [<start_point>]       # 根据<start_point>创建并切换分支
```

### 存储
```
git stash                                       # 存储当前工作区和暂存区
git stash save [message]                        # 存储当前工作去和暂存区
git stash list                                  # 现实存储的列表
git stash pop                                   # 从最近保存中恢复进度，并将其删除存储
git stash apply stash@{index}                   # 根据索引恢复进度
git stash clear                                 # 清空存储
```

### 标记
```
git tag -m [message] [tag] [commit]             # 创建标记
git tag -d [tag]                                # 删除标记
git tag -n -l                                   # 显示当前标记
git push [remote] [tag]:[tag]                   # 共享标记
git push [remote] :[tag]                        # 删除远程标记
```

### 分支
```
git checkout -b [branch1]                       # 创建并切换本地分支
git branch -d [branch1]                         # 删除本地分支
git push [remote] [branch1]:[branch2]           # 提交本地数据到远程分支
git pull [remote] [branch]:[branch]             # 从远程同步当前分支
git checkout -b [branch1] [remote]/[branch2]    # 切换远程分支
git push [remote] :[branch2]                    # 删除远程分支
git merge [branch] -m [message]                 # 合并分支
```

### 变基
```
git rebase [branch]                             # 变基合并，将两个分支进行合并
git rebase --continue                           # 变基发生冲突，解决冲突后继续变基
git rebase --abort                              # 变基发生冲突，终止变基
```

### 克隆
```
git clone [remote_url] [remote_name]            # 克隆版本库
git clone --bare [remote_url] [remote_name]     # 克隆裸版本库
```

